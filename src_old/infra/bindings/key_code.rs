use num_enum::TryFromPrimitive;

use crate::infra::bindings;

#[repr(i32)]
#[derive(Debug, Copy, Clone, Eq, PartialEq, TryFromPrimitive)]
pub enum KeyCode {
    LeftAlt = 0,
    LeftCtrl = 1,
    LeftShift = 2,
    Quote = 3,
    Hash = 4,
    CapsLock = 5,
    Colon = 6,
    Minus = 7,
    Equals = 8,
    Escape = 9,
    OpenBracket = 10,
    NumLock = 11,
    Period = 12,
    CloseBracket = 13,
    Semicolon = 14,
    Slash = 15,
    Print = 16,
    Tilde = 17,
    Backspace = 18,
    Delete = 19,
    Enter = 20,
    Space = 21,
    Tab = 22,
    End = 23,
    Home = 24,
    Insert = 25,
    /// Page Down
    Next = 26,
    /// Page Up
    Prior = 27,
    ArrowDown = 28,
    ArrowLeft = 29,
    ArrowRight = 30,
    ArrowUp = 31,
    F1 = 32,
    F2 = 33,
    F3 = 34,
    F4 = 35,
    F5 = 36,
    F6 = 37,
    F7 = 38,
    F8 = 39,
    F9 = 40,
    F10 = 41,
    F11 = 42,
    F12 = 43,
    Key0 = 48,
    Key1 = 49,
    Key2 = 50,
    Key3 = 51,
    Key4 = 52,
    Key5 = 53,
    Key6 = 54,
    Key7 = 55,
    Key8 = 56,
    Key9 = 57,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    PlusNum = 91,
    DecimalNum = 92,
    DivideNum = 93,
    MultiplyNum = 94,
    NumPad0 = 95,
    NumPad1 = 96,
    NumPad2 = 97,
    NumPad3 = 98,
    NumPad4 = 99,
    NumPad5 = 100,
    NumPad6 = 101,
    NumPad7 = 102,
    NumPad8 = 103,
    NumPad9 = 104,
    EnterNum = 105,
    MinusNum = 106,
    ImeKey1 = 107,
    ImeKey2 = 108,
    RightAlt = 109,
    RightCtrl = 110,
    Backslash = 111,
    F13 = 112,
    F14 = 113,
    F15 = 114,
    F16 = 115,
    F17 = 116,
    F18 = 117,
    F19 = 118,
    F20 = 119,
    F21 = 120,
    F22 = 121,
    F23 = 122,
    F24 = 123,
    F25 = 124,
    F26 = 125,
    F27 = 126,
    F28 = 127,
    F29 = 128,
    F30 = 129,
    F31 = 130,
    F32 = 131,
    F33 = 132,
    F34 = 133,
    F35 = 134,
    RightShift = 135,
    Eject = 136,
    EqualNum = 137,
    ClearNum = 138,
    LeftCmd = 139,
    Function = 140,
    RightCmd = 141,
    Scroll = 200,
    Pause = 201,
    LeftWin = 202,
    RightWin = 203,
    Menu = 204,
}

impl KeyCode {
    pub fn keycode_to_scancode(self) -> Option<(Option<u16>, u16)> {
        use KeyCode::*;

        match self {
            LeftAlt => Some((None, 0x38)),
            LeftCtrl => Some((None, 0x1d)),
            LeftShift => Some((None, 0x2a)),
            Quote => Some((None, 0x28)),
            Hash => Some((None, 0x2b)),
            CapsLock => Some((None, 0x3a)),
            Colon => Some((None, 0x33)),
            Minus => Some((None, 0x0c)),
            Equals => Some((None, 0x0d)),
            Escape => Some((None, 0x01)),
            OpenBracket => Some((None, 0x1a)),
            NumLock => Some((None, 0x45)),
            Period => Some((None, 0x34)),
            CloseBracket => Some((None, 0x1b)),
            Semicolon => Some((None, 0x27)),
            Slash => Some((None, 0x35)),
            Print => Some((None, 0x54)),
            Tilde => Some((None, 0x29)),
            Backspace => Some((None, 0x0e)),
            Delete => Some((Some(0xe0), 0x53)),
            Enter => Some((Some(0xe0), 0x1c)),
            Space => Some((Some(0xe0), 0x39)),
            Tab => Some((None, 0x0f)),
            End => Some((Some(0xe0), 0x4f)),
            Home => Some((Some(0xe0), 0x47)),
            Insert => Some((Some(0xe0), 0x52)),
            Next => Some((Some(0xe0), 0x51)),
            Prior => Some((Some(0xe0), 0x49)),
            ArrowDown => Some((Some(0xe0), 0x50)),
            ArrowLeft => Some((Some(0xe0), 0x4b)),
            ArrowRight => Some((Some(0xe0), 0x4d)),
            ArrowUp => Some((Some(0xe0), 0x48)),
            F1 => Some((None, 0x3b)),
            F2 => Some((None, 0x3c)),
            F3 => Some((None, 0x3d)),
            F4 => Some((None, 0x3e)),
            F5 => Some((None, 0x3f)),
            F6 => Some((None, 0x40)),
            F7 => Some((None, 0x41)),
            F8 => Some((None, 0x42)),
            F9 => Some((None, 0x43)),
            F10 => Some((None, 0x44)),
            F11 => Some((None, 0x57)),
            F12 => Some((None, 0x58)),
            Key0 => Some((None, 0x0b)),
            Key1 => Some((None, 0x02)),
            Key2 => Some((None, 0x03)),
            Key3 => Some((None, 0x04)),
            Key4 => Some((None, 0x05)),
            Key5 => Some((None, 0x06)),
            Key6 => Some((None, 0x07)),
            Key7 => Some((None, 0x08)),
            Key8 => Some((None, 0x09)),
            Key9 => Some((None, 0x0a)),
            A => Some((None, 0x1e)),
            B => Some((None, 0x30)),
            C => Some((None, 0x2e)),
            D => Some((None, 0x20)),
            E => Some((None, 0x12)),
            F => Some((None, 0x21)),
            G => Some((None, 0x22)),
            H => Some((None, 0x23)),
            I => Some((None, 0x17)),
            J => Some((None, 0x24)),
            K => Some((None, 0x25)),
            L => Some((None, 0x26)),
            M => Some((None, 0x32)),
            N => Some((None, 0x31)),
            O => Some((None, 0x18)),
            P => Some((None, 0x19)),
            Q => Some((None, 0x10)),
            R => Some((None, 0x13)),
            S => Some((None, 0x1f)),
            T => Some((None, 0x14)),
            U => Some((None, 0x16)),
            V => Some((None, 0x2f)),
            W => Some((None, 0x11)),
            X => Some((None, 0x2d)),
            Y => Some((None, 0x15)),
            Z => Some((None, 0x2c)),
            PlusNum => Some((None, 0x4e)),
            DecimalNum => Some((None, 0x53)),
            DivideNum => Some((Some(0xe0), 0x45)),
            MultiplyNum => Some((None, 0x37)),
            NumPad0 => Some((None, 0x52)),
            NumPad1 => Some((None, 0x4f)),
            NumPad2 => Some((None, 0x50)),
            NumPad3 => Some((None, 0x51)),
            NumPad4 => Some((None, 0x4b)),
            NumPad5 => Some((None, 0x4c)),
            NumPad6 => Some((None, 0x4d)),
            NumPad7 => Some((None, 0x47)),
            NumPad8 => Some((None, 0x48)),
            NumPad9 => Some((None, 0x49)),
            EnterNum => Some((Some(0xe0), 0x1c)),
            MinusNum => Some((None, 0x4a)),
            ImeKey1 => None,
            ImeKey2 => None,
            RightAlt => Some((Some(0xe0), 0x38)),
            RightCtrl => Some((Some(0xe0), 0x1d)),
            Backslash => Some((None, 0x56)),
            F13 => None,
            F14 => None,
            F15 => None,
            F16 => None,
            F17 => None,
            F18 => None,
            F19 => None,
            F20 => None,
            F21 => None,
            F22 => None,
            F23 => None,
            F24 => None,
            F25 => None,
            F26 => None,
            F27 => None,
            F28 => None,
            F29 => None,
            F30 => None,
            F31 => None,
            F32 => None,
            F33 => None,
            F34 => None,
            F35 => None,
            RightShift => Some((Some(0xe0), 0x36)),
            Eject => None,
            EqualNum => None,
            ClearNum => None,
            LeftCmd => Some((None, 0x1d)),
            Function => None,
            RightCmd => None,
            Scroll => None,
            Pause => Some((Some(0xe1), 0x1d)),
            LeftWin => Some((Some(0xe0), 0x5b)),
            RightWin => Some((Some(0xe0), 0x5c)),
            Menu => Some((Some(0xe0), 0x5d)),
        }
    }
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, Eq, PartialEq, TryFromPrimitive)]
pub enum MouseCode {
    Mouse1 = 0,
    Mouse3 = 1,
    Mouse2 = 2,
    Mouse4 = 3,
    Mouse5 = 4,
    Mouse6 = 5,
    Mouse7 = 6,
    Mouse8 = 7,
    Mouse9 = 8,
    Mouse10 = 9,
    Mouse11 = 10,
    Mouse12 = 11,
    Mouse13 = 12,
    Mouse14 = 13,
    Mouse15 = 14,
    Mouse16 = 15,
    Mouse17 = 16,
    Mouse18 = 17,
    Mouse19 = 18,
    Mouse20 = 19,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SendInputMouseButton {
    Left, // MOUSEEVENTF_LEFTDOWN/UP
    Right, // MOUSEEVENTF_RIGHTDOWN/UP
    Middle, // MOUSEEVENTF_MIDDLEDOWN/UP
    XButton(u16), // 1 = XButton1, 2 = XButton2
}

impl MouseCode {
    pub fn to_send_input_mouse_button(self) -> Option<SendInputMouseButton> {
        use MouseCode::*;
        match self {
            Mouse1 => Some(SendInputMouseButton::Left),
            Mouse2 => Some(SendInputMouseButton::Right),
            Mouse3 => Some(SendInputMouseButton::Middle),
            Mouse4 => Some(SendInputMouseButton::XButton(1)),
            Mouse5 => Some(SendInputMouseButton::XButton(2)),
            _ => None, // Mouse6â€“Mouse20 not supported via SendInput
        }
    }
}

impl bindings::Modifier {
    pub fn to_key_codes(&self) -> Vec<KeyCode> {
        let mut keys = Vec::new();
        if self.contains(bindings::Modifier::SHIFT) {
            keys.push(KeyCode::LeftShift);
        }
        if self.contains(bindings::Modifier::CTRL) {
            keys.push(KeyCode::LeftCtrl);
        }
        if self.contains(bindings::Modifier::ALT) {
            keys.push(KeyCode::LeftAlt);
        }
        keys
    }
}
